//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `dj_newHome_newCouponBgView`.
    static let dj_newHome_newCouponBgView = Rswift.ImageResource(bundle: R.hostingBundle, name: "dj_newHome_newCouponBgView")
    /// Image `icon_notify`.
    static let icon_notify = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_notify")
    /// Image `icon_zhuan`.
    static let icon_zhuan = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_zhuan")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dj_newHome_newCouponBgView", bundle: ..., traitCollection: ...)`
    static func dj_newHome_newCouponBgView(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dj_newHome_newCouponBgView, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_notify", bundle: ..., traitCollection: ...)`
    static func icon_notify(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_notify, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_zhuan", bundle: ..., traitCollection: ...)`
    static func icon_zhuan(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_zhuan, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `LaunchScreen`.
    static let launchScreen = _R.nib._LaunchScreen()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LaunchScreen", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.launchScreen) instead")
    static func launchScreen(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.launchScreen)
    }
    #endif

    static func launchScreen(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.launchScreen.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 160 localization keys.
    struct localizable {
      /// Value: %@ repositories
      static let searchRepositoriesTotalCountTitle = Rswift.StringResource(key: "Search.RepositoriesTotalCount.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ users
      static let searchUsersTotalCountTitle = Rswift.StringResource(key: "Search.UsersTotalCount.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Account
      static let settingsAccountSectionTitle = Rswift.StringResource(key: "Settings.AccountSection.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Acknowledgements
      static let settingsAcknowledgementsTitle = Rswift.StringResource(key: "Settings.Acknowledgements.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Activities
      static let homeTabBarNotificationsTitle = Rswift.StringResource(key: "Home.TabBar.Notifications.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ads enabled
      static let settingsBannerTitle = Rswift.StringResource(key: "Settings.Banner.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: All
      static let languagesAllSectionTitle = Rswift.StringResource(key: "Languages.AllSection.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: All
      static let notificationsAllSegmentTitle = Rswift.StringResource(key: "Notifications.AllSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: All Languages
      static let languagesAllButtonTitle = Rswift.StringResource(key: "Languages.allButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: All notifications marked as read
      static let notificationsMarkAsReadSuccess = Rswift.StringResource(key: "Notifications.MarkAsRead.Success", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure want to log out from SwiftHub?
      static let settingsLogoutAlertMessage = Rswift.StringResource(key: "Settings.Logout.Alert.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Back
      static let commonBack = Rswift.StringResource(key: "Common.Back", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Back online
      static let toastConnectionBackMessage = Rswift.StringResource(key: "Toast.ConnectionBack.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Basic
      static let loginBasicSegmentTitle = Rswift.StringResource(key: "Login.BasicSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Best match
      static let searchSortRepositoriesBestMatchTitle = Rswift.StringResource(key: "Search.SortRepositories.BestMatch.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Best match
      static let searchSortUsersBestMatchTitle = Rswift.StringResource(key: "Search.SortUsers.BestMatch.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Blog
      static let userBlogCellTitle = Rswift.StringResource(key: "User.BlogCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Branches
      static let repositoryBranchesCellTitle = Rswift.StringResource(key: "Repository.BranchesCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cache Successfully Cleared
      static let settingsRemoveCacheAlertSuccessMessage = Rswift.StringResource(key: "Settings.RemoveCache.Alert.SuccessMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let commonCancel = Rswift.StringResource(key: "Common.Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Close
      static let commonClose = Rswift.StringResource(key: "Common.Close", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Closed
      static let issuesClosedSegmentTitle = Rswift.StringResource(key: "Issues.ClosedSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Color theme
      static let settingsThemeTitle = Rswift.StringResource(key: "Settings.Theme.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Color theme
      static let themeNavigationTitle = Rswift.StringResource(key: "Theme.Navigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Commits
      static let repositoryCommitsCellTitle = Rswift.StringResource(key: "Repository.CommitsCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Company
      static let userCompanyCellTitle = Rswift.StringResource(key: "User.CompanyCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Continue
      static let whatsNewCompletionButtonTitle = Rswift.StringResource(key: "WhatsNew.CompletionButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Contributions
      static let userContributionsCellTitle = Rswift.StringResource(key: "User.ContributionsCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Contributors
      static let repositoryContributorsCellTitle = Rswift.StringResource(key: "Repository.ContributorsCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Contributors
      static let usersContributorsNavigationTitle = Rswift.StringResource(key: "Users.ContributorsNavigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Count Lines of Code
      static let repositoryCountLinesOfCodeCellTitle = Rswift.StringResource(key: "Repository.CountLinesOfCodeCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Count Lines of Code
      static let whatsNewItem1Title = Rswift.StringResource(key: "WhatsNew.Item1.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Created
      static let repositoryCreatedCellTitle = Rswift.StringResource(key: "Repository.CreatedCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Created
      static let userCreatedCellTitle = Rswift.StringResource(key: "User.CreatedCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Daily
      static let searchDailySegmentTitle = Rswift.StringResource(key: "Search.DailySegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Delete
      static let commonDelete = Rswift.StringResource(key: "Common.Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Done
      static let commonDone = Rswift.StringResource(key: "Common.Done", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit
      static let commonEdit = Rswift.StringResource(key: "Common.Edit", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error
      static let commonError = Rswift.StringResource(key: "Common.Error", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Events
      static let eventsNavigationTitle = Rswift.StringResource(key: "Events.Navigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Events
      static let homeTabBarEventsTitle = Rswift.StringResource(key: "Home.TabBar.Events.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Events
      static let repositoryEventsCellTitle = Rswift.StringResource(key: "Repository.EventsCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Events
      static let userEventsCellTitle = Rswift.StringResource(key: "User.EventsCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fewest followers
      static let searchSortUsersFewestFollowersTitle = Rswift.StringResource(key: "Search.SortUsers.FewestFollowers.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fewest forks
      static let searchSortRepositoriesFewestForksTitle = Rswift.StringResource(key: "Search.SortRepositories.FewestForks.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fewest repositories
      static let searchSortUsersFewestRepositoriesTitle = Rswift.StringResource(key: "Search.SortUsers.FewestRepositories.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Fewest stars
      static let searchSortRepositoriesFewestStarsTitle = Rswift.StringResource(key: "Search.SortRepositories.FewestStars.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Followers
      static let userFollowersButtonTitle = Rswift.StringResource(key: "User.FollowersButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Followers
      static let usersFollowersNavigationTitle = Rswift.StringResource(key: "Users.FollowersNavigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Following
      static let userFollowingButtonTitle = Rswift.StringResource(key: "User.FollowingButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Following
      static let usersFollowingNavigationTitle = Rswift.StringResource(key: "Users.FollowingNavigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: For API requests using Basic Authentication or OAuth, you can make up to 5000 requests per hour.   For unauthenticated requests, the rate limit allows for up to 60 requests per hour.
      static let loginDetailLabelText = Rswift.StringResource(key: "Login.DetailLabel.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Forked from
      static let repositoryParentCellTitle = Rswift.StringResource(key: "Repository.ParentCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Forks
      static let repositoriesForksNavigationTitle = Rswift.StringResource(key: "Repositories.ForksNavigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Forks
      static let repositoryForksButtonTitle = Rswift.StringResource(key: "Repository.ForksButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Global Search
      static let searchSearchBarPlaceholder = Rswift.StringResource(key: "Search.SearchBar.Placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Homepage
      static let repositoryHomepageCellTitle = Rswift.StringResource(key: "Repository.HomepageCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invite friends
      static let contactsNavigationTitle = Rswift.StringResource(key: "Contacts.Navigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Invite friends
      static let settingsContactsTitle = Rswift.StringResource(key: "Settings.Contacts.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Issues
      static let issuesNavigationTitle = Rswift.StringResource(key: "Issues.Navigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Issues
      static let repositoryIssuesCellTitle = Rswift.StringResource(key: "Repository.IssuesCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Language
      static let languageNavigationTitle = Rswift.StringResource(key: "Language.Navigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Language
      static let repositoryLanguageCellTitle = Rswift.StringResource(key: "Repository.LanguageCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Language
      static let settingsLanguageTitle = Rswift.StringResource(key: "Settings.Language.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Languages
      static let languagesNavigationTitle = Rswift.StringResource(key: "Languages.Navigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Last recently updated
      static let searchSortRepositoriesLastRecentlyUpdatedTitle = Rswift.StringResource(key: "Search.SortRepositories.LastRecentlyUpdated.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Least recently joined
      static let searchSortUsersLeastRecentlyJoinedTitle = Rswift.StringResource(key: "Search.SortUsers.LeastRecentlyJoined.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Log Out
      static let settingsLogOutTitle = Rswift.StringResource(key: "Settings.LogOut.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Login
      static let homeTabBarLoginTitle = Rswift.StringResource(key: "Home.TabBar.Login.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Login
      static let loginBasicLoginButtonTitle = Rswift.StringResource(key: "Login.BasicLoginButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Login
      static let loginPersonalLoginButtonTitle = Rswift.StringResource(key: "Login.PersonalLoginButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Logout
      static let settingsLogoutAlertConfirmButtonTitle = Rswift.StringResource(key: "Settings.Logout.Alert.ConfirmButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Monthly
      static let searchMonthlySegmentTitle = Rswift.StringResource(key: "Search.MonthlySegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Most followers
      static let searchSortUsersMostFollowersTitle = Rswift.StringResource(key: "Search.SortUsers.MostFollowers.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Most forks
      static let searchSortRepositoriesMostForksTitle = Rswift.StringResource(key: "Search.SortRepositories.MostForks.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Most recently joined
      static let searchSortUsersMostRecentlyJoinedTitle = Rswift.StringResource(key: "Search.SortUsers.MostRecentlyJoined.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Most repositories
      static let searchSortUsersMostRepositoriesTitle = Rswift.StringResource(key: "Search.SortUsers.MostRepositories.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Most stars
      static let searchSortRepositoriesMostStarsTitle = Rswift.StringResource(key: "Search.SortRepositories.MostStars.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My Notifications
      static let repositoryNotificationsCellTitle = Rswift.StringResource(key: "Repository.NotificationsCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My Projects
      static let settingsProjectsSectionTitle = Rswift.StringResource(key: "Settings.ProjectsSection.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Next
      static let commonNext = Rswift.StringResource(key: "Common.Next", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Night mode
      static let settingsNightModeTitle = Rswift.StringResource(key: "Settings.NightMode.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No
      static let commonNo = Rswift.StringResource(key: "Common.No", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No Results
      static let commonNoResults = Rswift.StringResource(key: "Common.NoResults", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No connection
      static let toastConnectionLostMessage = Rswift.StringResource(key: "Toast.ConnectionLost.Message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Notifications
      static let notificationsNavigationTitle = Rswift.StringResource(key: "Notifications.Navigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OAuth
      static let loginOAuthSegmentTitle = Rswift.StringResource(key: "Login.OAuthSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let commonOK = Rswift.StringResource(key: "Common.OK", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open
      static let issuesOpenSegmentTitle = Rswift.StringResource(key: "Issues.OpenSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Open Source
      static let whatsNewItem3Title = Rswift.StringResource(key: "WhatsNew.Item3.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Organizations
      static let userOrganizationsSectionTitle = Rswift.StringResource(key: "User.OrganizationsSection.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Participating
      static let notificationsParticipatingSegmentTitle = Rswift.StringResource(key: "Notifications.ParticipatingSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Performed
      static let eventsPerformedSegmentTitle = Rswift.StringResource(key: "Events.PerformedSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Personal
      static let loginPersonalSegmentTitle = Rswift.StringResource(key: "Login.PersonalSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Personal Access Token
      static let loginPersonalTitleLabelText = Rswift.StringResource(key: "Login.PersonalTitleLabel.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pinned
      static let userPinnedSectionTitle = Rswift.StringResource(key: "User.PinnedSection.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please check your login or password
      static let loginLoginFailedDescription = Rswift.StringResource(key: "Login.LoginFailed.Description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Popular
      static let languagesPopularSectionTitle = Rswift.StringResource(key: "Languages.PopularSection.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Preferences
      static let settingsPreferencesSectionTitle = Rswift.StringResource(key: "Settings.PreferencesSection.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Profile
      static let homeTabBarProfileTitle = Rswift.StringResource(key: "Home.TabBar.Profile.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Profile Summary
      static let userProfileSummaryCellTitle = Rswift.StringResource(key: "User.ProfileSummaryCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pull Requests
      static let repositoryPullRequestsCellTitle = Rswift.StringResource(key: "Repository.PullRequestsCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Readme
      static let repositoryReadmeCellTitle = Rswift.StringResource(key: "Repository.ReadmeCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Received
      static let eventsReceivedSegmentTitle = Rswift.StringResource(key: "Events.ReceivedSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Recently updated
      static let searchSortRepositoriesRecentlyUpdatedTitle = Rswift.StringResource(key: "Search.SortRepositories.RecentlyUpdated.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Releases
      static let repositoryReleasesCellTitle = Rswift.StringResource(key: "Repository.ReleasesCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Remove cache
      static let settingsRemoveCacheTitle = Rswift.StringResource(key: "Settings.RemoveCache.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Repositories
      static let repositoriesRepositoriesNavigationTitle = Rswift.StringResource(key: "Repositories.RepositoriesNavigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Repositories
      static let searchRepositoriesSegmentTitle = Rswift.StringResource(key: "Search.RepositoriesSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Repositories
      static let userRepositoriesButtonTitle = Rswift.StringResource(key: "User.RepositoriesButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Reset
      static let commonReset = Rswift.StringResource(key: "Common.Reset", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Save
      static let commonSave = Rswift.StringResource(key: "Common.Save", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search
      static let commonSearch = Rswift.StringResource(key: "Common.Search", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search
      static let homeTabBarSearchTitle = Rswift.StringResource(key: "Home.TabBar.Search.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search
      static let searchSearchSectionTitle = Rswift.StringResource(key: "Search.SearchSection.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search
      static let searchSearchSegmentTitle = Rswift.StringResource(key: "Search.SearchSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Search results for %@
      static let searchSearchSectionWithLanguageTitle = Rswift.StringResource(key: "Search.SearchSectionWithLanguage.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: See what the GitHub community is most excited about today
      static let whatsNewItem4Subtitle = Rswift.StringResource(key: "WhatsNew.Item4.Subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let contactsPermissionDeniedButton = Rswift.StringResource(key: "Contacts.PermissionDenied.Button", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let homeTabBarSettingsTitle = Rswift.StringResource(key: "Home.TabBar.Settings.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Settings
      static let settingsNavigationTitle = Rswift.StringResource(key: "Settings.Navigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign in with Github
      static let loginOAuthloginButtonTitle = Rswift.StringResource(key: "Login.OAuthloginButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Size
      static let repositorySizeCellTitle = Rswift.StringResource(key: "Repository.SizeCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Skip
      static let commonSkip = Rswift.StringResource(key: "Common.Skip", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Source Code
      static let repositorySourceCellTitle = Rswift.StringResource(key: "Repository.SourceCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Stargazers
      static let usersStargazersNavigationTitle = Rswift.StringResource(key: "Users.StargazersNavigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Starred
      static let repositoriesStarredNavigationTitle = Rswift.StringResource(key: "Repositories.StarredNavigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Stars
      static let repositoryStarsButtonTitle = Rswift.StringResource(key: "Repository.StarsButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Stars
      static let userStarsCellTitle = Rswift.StringResource(key: "User.StarsCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Stars History
      static let repositoryStarsHistoryCellTitle = Rswift.StringResource(key: "Repository.StarsHistoryCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Success
      static let commonSuccess = Rswift.StringResource(key: "Common.Success", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Support
      static let settingsSupportSectionTitle = Rswift.StringResource(key: "Settings.SupportSection.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SwiftHub is open source Stars are welcome ★
      static let whatsNewItem3Subtitle = Rswift.StringResource(key: "WhatsNew.Item3.Subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Themes
      static let whatsNewItem2Title = Rswift.StringResource(key: "WhatsNew.Item2.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: These permissions are required %@
      static let loginPersonalDetailLabelText = Rswift.StringResource(key: "Login.PersonalDetailLabel.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Tool for counting lines of code from repositories
      static let whatsNewItem1Subtitle = Rswift.StringResource(key: "WhatsNew.Item1.Subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Trending
      static let searchTrendingSectionTitle = Rswift.StringResource(key: "Search.TrendingSection.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Trending
      static let searchTrendingSegmentTitle = Rswift.StringResource(key: "Search.TrendingSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Trending
      static let whatsNewItem4Title = Rswift.StringResource(key: "WhatsNew.Item4.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Trending results for %@
      static let searchTrendingSectionWithLanguageTitle = Rswift.StringResource(key: "Search.TrendingSectionWithLanguage.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unread
      static let notificationsUnreadSegmentTitle = Rswift.StringResource(key: "Notifications.UnreadSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Updated
      static let repositoryUpdatedCellTitle = Rswift.StringResource(key: "Repository.UpdatedCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Updated
      static let userUpdatedCellTitle = Rswift.StringResource(key: "User.UpdatedCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Users
      static let searchUsersSegmentTitle = Rswift.StringResource(key: "Search.UsersSegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: View on GitHub
      static let whatsNewDetailButtonTitle = Rswift.StringResource(key: "WhatsNew.DetailButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Watchers
      static let repositoryWatchersButtonTitle = Rswift.StringResource(key: "Repository.WatchersButton.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Watchers
      static let usersWatchersNavigationTitle = Rswift.StringResource(key: "Users.WatchersNavigation.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Watching
      static let userWatchingCellTitle = Rswift.StringResource(key: "User.WatchingCell.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We can't continue without your  permission to access your contacts.  Try Again?
      static let contactsPermissionDeniedDescription = Rswift.StringResource(key: "Contacts.PermissionDenied.Description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We need your permission!
      static let contactsPermissionDeniedTitle = Rswift.StringResource(key: "Contacts.PermissionDenied.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Weekly
      static let searchWeeklySegmentTitle = Rswift.StringResource(key: "Search.WeeklySegment.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Welcome to SwiftHub
      static let loginTitleLabelText = Rswift.StringResource(key: "Login.TitleLabel.Text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Welcome to SwiftHub!
      static let initialNoResults = Rswift.StringResource(key: "Initial.NoResults", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Whats New
      static let settingsWhatsNewTitle = Rswift.StringResource(key: "Settings.WhatsNew.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Whats New
      static let whatsNewTitle = Rswift.StringResource(key: "WhatsNew.Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yes
      static let commonYes = Rswift.StringResource(key: "Common.Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can apply different themes with Light and Dark modes
      static let whatsNewItem2Subtitle = Rswift.StringResource(key: "WhatsNew.Item2.Subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: login
      static let loginLoginTextFieldPlaceholder = Rswift.StringResource(key: "Login.LoginTextField.Placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: password
      static let loginPasswordTextFieldPlaceholder = Rswift.StringResource(key: "Login.PasswordTextField.Placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: personal access token
      static let loginPersonalTokenTextFieldPlaceholder = Rswift.StringResource(key: "Login.PersonalTokenTextField.Placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: %@ repositories
      static func searchRepositoriesTotalCountTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Search.RepositoriesTotalCount.Title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.RepositoriesTotalCount.Title"
        }

        let format = NSLocalizedString("Search.RepositoriesTotalCount.Title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: %@ users
      static func searchUsersTotalCountTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Search.UsersTotalCount.Title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.UsersTotalCount.Title"
        }

        let format = NSLocalizedString("Search.UsersTotalCount.Title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Account
      static func settingsAccountSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings.AccountSection.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings.AccountSection.Title"
        }

        return NSLocalizedString("Settings.AccountSection.Title", bundle: bundle, comment: "")
      }

      /// Value: Acknowledgements
      static func settingsAcknowledgementsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings.Acknowledgements.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings.Acknowledgements.Title"
        }

        return NSLocalizedString("Settings.Acknowledgements.Title", bundle: bundle, comment: "")
      }

      /// Value: Activities
      static func homeTabBarNotificationsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.TabBar.Notifications.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.TabBar.Notifications.Title"
        }

        return NSLocalizedString("Home.TabBar.Notifications.Title", bundle: bundle, comment: "")
      }

      /// Value: Ads enabled
      static func settingsBannerTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings.Banner.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings.Banner.Title"
        }

        return NSLocalizedString("Settings.Banner.Title", bundle: bundle, comment: "")
      }

      /// Value: All
      static func languagesAllSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Languages.AllSection.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Languages.AllSection.Title"
        }

        return NSLocalizedString("Languages.AllSection.Title", bundle: bundle, comment: "")
      }

      /// Value: All
      static func notificationsAllSegmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notifications.AllSegment.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notifications.AllSegment.Title"
        }

        return NSLocalizedString("Notifications.AllSegment.Title", bundle: bundle, comment: "")
      }

      /// Value: All Languages
      static func languagesAllButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Languages.allButton.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Languages.allButton.Title"
        }

        return NSLocalizedString("Languages.allButton.Title", bundle: bundle, comment: "")
      }

      /// Value: All notifications marked as read
      static func notificationsMarkAsReadSuccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notifications.MarkAsRead.Success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notifications.MarkAsRead.Success"
        }

        return NSLocalizedString("Notifications.MarkAsRead.Success", bundle: bundle, comment: "")
      }

      /// Value: Are you sure want to log out from SwiftHub?
      static func settingsLogoutAlertMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings.Logout.Alert.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings.Logout.Alert.Message"
        }

        return NSLocalizedString("Settings.Logout.Alert.Message", bundle: bundle, comment: "")
      }

      /// Value: Back
      static func commonBack(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Back", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.Back"
        }

        return NSLocalizedString("Common.Back", bundle: bundle, comment: "")
      }

      /// Value: Back online
      static func toastConnectionBackMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Toast.ConnectionBack.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Toast.ConnectionBack.Message"
        }

        return NSLocalizedString("Toast.ConnectionBack.Message", bundle: bundle, comment: "")
      }

      /// Value: Basic
      static func loginBasicSegmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.BasicSegment.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.BasicSegment.Title"
        }

        return NSLocalizedString("Login.BasicSegment.Title", bundle: bundle, comment: "")
      }

      /// Value: Best match
      static func searchSortRepositoriesBestMatchTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.SortRepositories.BestMatch.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SortRepositories.BestMatch.Title"
        }

        return NSLocalizedString("Search.SortRepositories.BestMatch.Title", bundle: bundle, comment: "")
      }

      /// Value: Best match
      static func searchSortUsersBestMatchTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.SortUsers.BestMatch.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SortUsers.BestMatch.Title"
        }

        return NSLocalizedString("Search.SortUsers.BestMatch.Title", bundle: bundle, comment: "")
      }

      /// Value: Blog
      static func userBlogCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User.BlogCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User.BlogCell.Title"
        }

        return NSLocalizedString("User.BlogCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Branches
      static func repositoryBranchesCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.BranchesCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.BranchesCell.Title"
        }

        return NSLocalizedString("Repository.BranchesCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Cache Successfully Cleared
      static func settingsRemoveCacheAlertSuccessMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings.RemoveCache.Alert.SuccessMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings.RemoveCache.Alert.SuccessMessage"
        }

        return NSLocalizedString("Settings.RemoveCache.Alert.SuccessMessage", bundle: bundle, comment: "")
      }

      /// Value: Cancel
      static func commonCancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.Cancel"
        }

        return NSLocalizedString("Common.Cancel", bundle: bundle, comment: "")
      }

      /// Value: Close
      static func commonClose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.Close"
        }

        return NSLocalizedString("Common.Close", bundle: bundle, comment: "")
      }

      /// Value: Closed
      static func issuesClosedSegmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Issues.ClosedSegment.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Issues.ClosedSegment.Title"
        }

        return NSLocalizedString("Issues.ClosedSegment.Title", bundle: bundle, comment: "")
      }

      /// Value: Color theme
      static func settingsThemeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings.Theme.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings.Theme.Title"
        }

        return NSLocalizedString("Settings.Theme.Title", bundle: bundle, comment: "")
      }

      /// Value: Color theme
      static func themeNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Theme.Navigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Theme.Navigation.Title"
        }

        return NSLocalizedString("Theme.Navigation.Title", bundle: bundle, comment: "")
      }

      /// Value: Commits
      static func repositoryCommitsCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.CommitsCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.CommitsCell.Title"
        }

        return NSLocalizedString("Repository.CommitsCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Company
      static func userCompanyCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User.CompanyCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User.CompanyCell.Title"
        }

        return NSLocalizedString("User.CompanyCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Continue
      static func whatsNewCompletionButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WhatsNew.CompletionButton.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WhatsNew.CompletionButton.Title"
        }

        return NSLocalizedString("WhatsNew.CompletionButton.Title", bundle: bundle, comment: "")
      }

      /// Value: Contributions
      static func userContributionsCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User.ContributionsCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User.ContributionsCell.Title"
        }

        return NSLocalizedString("User.ContributionsCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Contributors
      static func repositoryContributorsCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.ContributorsCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.ContributorsCell.Title"
        }

        return NSLocalizedString("Repository.ContributorsCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Contributors
      static func usersContributorsNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Users.ContributorsNavigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Users.ContributorsNavigation.Title"
        }

        return NSLocalizedString("Users.ContributorsNavigation.Title", bundle: bundle, comment: "")
      }

      /// Value: Count Lines of Code
      static func repositoryCountLinesOfCodeCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.CountLinesOfCodeCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.CountLinesOfCodeCell.Title"
        }

        return NSLocalizedString("Repository.CountLinesOfCodeCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Count Lines of Code
      static func whatsNewItem1Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WhatsNew.Item1.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WhatsNew.Item1.Title"
        }

        return NSLocalizedString("WhatsNew.Item1.Title", bundle: bundle, comment: "")
      }

      /// Value: Created
      static func repositoryCreatedCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.CreatedCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.CreatedCell.Title"
        }

        return NSLocalizedString("Repository.CreatedCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Created
      static func userCreatedCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User.CreatedCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User.CreatedCell.Title"
        }

        return NSLocalizedString("User.CreatedCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Daily
      static func searchDailySegmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.DailySegment.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.DailySegment.Title"
        }

        return NSLocalizedString("Search.DailySegment.Title", bundle: bundle, comment: "")
      }

      /// Value: Delete
      static func commonDelete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.Delete"
        }

        return NSLocalizedString("Common.Delete", bundle: bundle, comment: "")
      }

      /// Value: Done
      static func commonDone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.Done"
        }

        return NSLocalizedString("Common.Done", bundle: bundle, comment: "")
      }

      /// Value: Edit
      static func commonEdit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.Edit"
        }

        return NSLocalizedString("Common.Edit", bundle: bundle, comment: "")
      }

      /// Value: Error
      static func commonError(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Error", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.Error"
        }

        return NSLocalizedString("Common.Error", bundle: bundle, comment: "")
      }

      /// Value: Events
      static func eventsNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Events.Navigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Events.Navigation.Title"
        }

        return NSLocalizedString("Events.Navigation.Title", bundle: bundle, comment: "")
      }

      /// Value: Events
      static func homeTabBarEventsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.TabBar.Events.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.TabBar.Events.Title"
        }

        return NSLocalizedString("Home.TabBar.Events.Title", bundle: bundle, comment: "")
      }

      /// Value: Events
      static func repositoryEventsCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.EventsCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.EventsCell.Title"
        }

        return NSLocalizedString("Repository.EventsCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Events
      static func userEventsCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User.EventsCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User.EventsCell.Title"
        }

        return NSLocalizedString("User.EventsCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Fewest followers
      static func searchSortUsersFewestFollowersTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.SortUsers.FewestFollowers.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SortUsers.FewestFollowers.Title"
        }

        return NSLocalizedString("Search.SortUsers.FewestFollowers.Title", bundle: bundle, comment: "")
      }

      /// Value: Fewest forks
      static func searchSortRepositoriesFewestForksTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.SortRepositories.FewestForks.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SortRepositories.FewestForks.Title"
        }

        return NSLocalizedString("Search.SortRepositories.FewestForks.Title", bundle: bundle, comment: "")
      }

      /// Value: Fewest repositories
      static func searchSortUsersFewestRepositoriesTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.SortUsers.FewestRepositories.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SortUsers.FewestRepositories.Title"
        }

        return NSLocalizedString("Search.SortUsers.FewestRepositories.Title", bundle: bundle, comment: "")
      }

      /// Value: Fewest stars
      static func searchSortRepositoriesFewestStarsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.SortRepositories.FewestStars.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SortRepositories.FewestStars.Title"
        }

        return NSLocalizedString("Search.SortRepositories.FewestStars.Title", bundle: bundle, comment: "")
      }

      /// Value: Followers
      static func userFollowersButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User.FollowersButton.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User.FollowersButton.Title"
        }

        return NSLocalizedString("User.FollowersButton.Title", bundle: bundle, comment: "")
      }

      /// Value: Followers
      static func usersFollowersNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Users.FollowersNavigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Users.FollowersNavigation.Title"
        }

        return NSLocalizedString("Users.FollowersNavigation.Title", bundle: bundle, comment: "")
      }

      /// Value: Following
      static func userFollowingButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User.FollowingButton.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User.FollowingButton.Title"
        }

        return NSLocalizedString("User.FollowingButton.Title", bundle: bundle, comment: "")
      }

      /// Value: Following
      static func usersFollowingNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Users.FollowingNavigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Users.FollowingNavigation.Title"
        }

        return NSLocalizedString("Users.FollowingNavigation.Title", bundle: bundle, comment: "")
      }

      /// Value: For API requests using Basic Authentication or OAuth, you can make up to 5000 requests per hour.   For unauthenticated requests, the rate limit allows for up to 60 requests per hour.
      static func loginDetailLabelText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.DetailLabel.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.DetailLabel.Text"
        }

        return NSLocalizedString("Login.DetailLabel.Text", bundle: bundle, comment: "")
      }

      /// Value: Forked from
      static func repositoryParentCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.ParentCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.ParentCell.Title"
        }

        return NSLocalizedString("Repository.ParentCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Forks
      static func repositoriesForksNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repositories.ForksNavigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repositories.ForksNavigation.Title"
        }

        return NSLocalizedString("Repositories.ForksNavigation.Title", bundle: bundle, comment: "")
      }

      /// Value: Forks
      static func repositoryForksButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.ForksButton.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.ForksButton.Title"
        }

        return NSLocalizedString("Repository.ForksButton.Title", bundle: bundle, comment: "")
      }

      /// Value: Global Search
      static func searchSearchBarPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.SearchBar.Placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SearchBar.Placeholder"
        }

        return NSLocalizedString("Search.SearchBar.Placeholder", bundle: bundle, comment: "")
      }

      /// Value: Homepage
      static func repositoryHomepageCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.HomepageCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.HomepageCell.Title"
        }

        return NSLocalizedString("Repository.HomepageCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Invite friends
      static func contactsNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Contacts.Navigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Contacts.Navigation.Title"
        }

        return NSLocalizedString("Contacts.Navigation.Title", bundle: bundle, comment: "")
      }

      /// Value: Invite friends
      static func settingsContactsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings.Contacts.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings.Contacts.Title"
        }

        return NSLocalizedString("Settings.Contacts.Title", bundle: bundle, comment: "")
      }

      /// Value: Issues
      static func issuesNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Issues.Navigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Issues.Navigation.Title"
        }

        return NSLocalizedString("Issues.Navigation.Title", bundle: bundle, comment: "")
      }

      /// Value: Issues
      static func repositoryIssuesCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.IssuesCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.IssuesCell.Title"
        }

        return NSLocalizedString("Repository.IssuesCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Language
      static func languageNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Language.Navigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Language.Navigation.Title"
        }

        return NSLocalizedString("Language.Navigation.Title", bundle: bundle, comment: "")
      }

      /// Value: Language
      static func repositoryLanguageCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.LanguageCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.LanguageCell.Title"
        }

        return NSLocalizedString("Repository.LanguageCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Language
      static func settingsLanguageTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings.Language.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings.Language.Title"
        }

        return NSLocalizedString("Settings.Language.Title", bundle: bundle, comment: "")
      }

      /// Value: Languages
      static func languagesNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Languages.Navigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Languages.Navigation.Title"
        }

        return NSLocalizedString("Languages.Navigation.Title", bundle: bundle, comment: "")
      }

      /// Value: Last recently updated
      static func searchSortRepositoriesLastRecentlyUpdatedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.SortRepositories.LastRecentlyUpdated.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SortRepositories.LastRecentlyUpdated.Title"
        }

        return NSLocalizedString("Search.SortRepositories.LastRecentlyUpdated.Title", bundle: bundle, comment: "")
      }

      /// Value: Least recently joined
      static func searchSortUsersLeastRecentlyJoinedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.SortUsers.LeastRecentlyJoined.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SortUsers.LeastRecentlyJoined.Title"
        }

        return NSLocalizedString("Search.SortUsers.LeastRecentlyJoined.Title", bundle: bundle, comment: "")
      }

      /// Value: Log Out
      static func settingsLogOutTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings.LogOut.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings.LogOut.Title"
        }

        return NSLocalizedString("Settings.LogOut.Title", bundle: bundle, comment: "")
      }

      /// Value: Login
      static func homeTabBarLoginTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.TabBar.Login.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.TabBar.Login.Title"
        }

        return NSLocalizedString("Home.TabBar.Login.Title", bundle: bundle, comment: "")
      }

      /// Value: Login
      static func loginBasicLoginButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.BasicLoginButton.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.BasicLoginButton.Title"
        }

        return NSLocalizedString("Login.BasicLoginButton.Title", bundle: bundle, comment: "")
      }

      /// Value: Login
      static func loginPersonalLoginButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.PersonalLoginButton.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.PersonalLoginButton.Title"
        }

        return NSLocalizedString("Login.PersonalLoginButton.Title", bundle: bundle, comment: "")
      }

      /// Value: Logout
      static func settingsLogoutAlertConfirmButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings.Logout.Alert.ConfirmButton.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings.Logout.Alert.ConfirmButton.Title"
        }

        return NSLocalizedString("Settings.Logout.Alert.ConfirmButton.Title", bundle: bundle, comment: "")
      }

      /// Value: Monthly
      static func searchMonthlySegmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.MonthlySegment.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.MonthlySegment.Title"
        }

        return NSLocalizedString("Search.MonthlySegment.Title", bundle: bundle, comment: "")
      }

      /// Value: Most followers
      static func searchSortUsersMostFollowersTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.SortUsers.MostFollowers.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SortUsers.MostFollowers.Title"
        }

        return NSLocalizedString("Search.SortUsers.MostFollowers.Title", bundle: bundle, comment: "")
      }

      /// Value: Most forks
      static func searchSortRepositoriesMostForksTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.SortRepositories.MostForks.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SortRepositories.MostForks.Title"
        }

        return NSLocalizedString("Search.SortRepositories.MostForks.Title", bundle: bundle, comment: "")
      }

      /// Value: Most recently joined
      static func searchSortUsersMostRecentlyJoinedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.SortUsers.MostRecentlyJoined.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SortUsers.MostRecentlyJoined.Title"
        }

        return NSLocalizedString("Search.SortUsers.MostRecentlyJoined.Title", bundle: bundle, comment: "")
      }

      /// Value: Most repositories
      static func searchSortUsersMostRepositoriesTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.SortUsers.MostRepositories.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SortUsers.MostRepositories.Title"
        }

        return NSLocalizedString("Search.SortUsers.MostRepositories.Title", bundle: bundle, comment: "")
      }

      /// Value: Most stars
      static func searchSortRepositoriesMostStarsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.SortRepositories.MostStars.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SortRepositories.MostStars.Title"
        }

        return NSLocalizedString("Search.SortRepositories.MostStars.Title", bundle: bundle, comment: "")
      }

      /// Value: My Notifications
      static func repositoryNotificationsCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.NotificationsCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.NotificationsCell.Title"
        }

        return NSLocalizedString("Repository.NotificationsCell.Title", bundle: bundle, comment: "")
      }

      /// Value: My Projects
      static func settingsProjectsSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings.ProjectsSection.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings.ProjectsSection.Title"
        }

        return NSLocalizedString("Settings.ProjectsSection.Title", bundle: bundle, comment: "")
      }

      /// Value: Next
      static func commonNext(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Next", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.Next"
        }

        return NSLocalizedString("Common.Next", bundle: bundle, comment: "")
      }

      /// Value: Night mode
      static func settingsNightModeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings.NightMode.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings.NightMode.Title"
        }

        return NSLocalizedString("Settings.NightMode.Title", bundle: bundle, comment: "")
      }

      /// Value: No
      static func commonNo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.No", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.No"
        }

        return NSLocalizedString("Common.No", bundle: bundle, comment: "")
      }

      /// Value: No Results
      static func commonNoResults(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.NoResults", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.NoResults"
        }

        return NSLocalizedString("Common.NoResults", bundle: bundle, comment: "")
      }

      /// Value: No connection
      static func toastConnectionLostMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Toast.ConnectionLost.Message", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Toast.ConnectionLost.Message"
        }

        return NSLocalizedString("Toast.ConnectionLost.Message", bundle: bundle, comment: "")
      }

      /// Value: Notifications
      static func notificationsNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notifications.Navigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notifications.Navigation.Title"
        }

        return NSLocalizedString("Notifications.Navigation.Title", bundle: bundle, comment: "")
      }

      /// Value: OAuth
      static func loginOAuthSegmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.OAuthSegment.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.OAuthSegment.Title"
        }

        return NSLocalizedString("Login.OAuthSegment.Title", bundle: bundle, comment: "")
      }

      /// Value: OK
      static func commonOK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.OK"
        }

        return NSLocalizedString("Common.OK", bundle: bundle, comment: "")
      }

      /// Value: Open
      static func issuesOpenSegmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Issues.OpenSegment.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Issues.OpenSegment.Title"
        }

        return NSLocalizedString("Issues.OpenSegment.Title", bundle: bundle, comment: "")
      }

      /// Value: Open Source
      static func whatsNewItem3Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WhatsNew.Item3.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WhatsNew.Item3.Title"
        }

        return NSLocalizedString("WhatsNew.Item3.Title", bundle: bundle, comment: "")
      }

      /// Value: Organizations
      static func userOrganizationsSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User.OrganizationsSection.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User.OrganizationsSection.Title"
        }

        return NSLocalizedString("User.OrganizationsSection.Title", bundle: bundle, comment: "")
      }

      /// Value: Participating
      static func notificationsParticipatingSegmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notifications.ParticipatingSegment.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notifications.ParticipatingSegment.Title"
        }

        return NSLocalizedString("Notifications.ParticipatingSegment.Title", bundle: bundle, comment: "")
      }

      /// Value: Performed
      static func eventsPerformedSegmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Events.PerformedSegment.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Events.PerformedSegment.Title"
        }

        return NSLocalizedString("Events.PerformedSegment.Title", bundle: bundle, comment: "")
      }

      /// Value: Personal
      static func loginPersonalSegmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.PersonalSegment.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.PersonalSegment.Title"
        }

        return NSLocalizedString("Login.PersonalSegment.Title", bundle: bundle, comment: "")
      }

      /// Value: Personal Access Token
      static func loginPersonalTitleLabelText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.PersonalTitleLabel.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.PersonalTitleLabel.Text"
        }

        return NSLocalizedString("Login.PersonalTitleLabel.Text", bundle: bundle, comment: "")
      }

      /// Value: Pinned
      static func userPinnedSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User.PinnedSection.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User.PinnedSection.Title"
        }

        return NSLocalizedString("User.PinnedSection.Title", bundle: bundle, comment: "")
      }

      /// Value: Please check your login or password
      static func loginLoginFailedDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.LoginFailed.Description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.LoginFailed.Description"
        }

        return NSLocalizedString("Login.LoginFailed.Description", bundle: bundle, comment: "")
      }

      /// Value: Popular
      static func languagesPopularSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Languages.PopularSection.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Languages.PopularSection.Title"
        }

        return NSLocalizedString("Languages.PopularSection.Title", bundle: bundle, comment: "")
      }

      /// Value: Preferences
      static func settingsPreferencesSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings.PreferencesSection.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings.PreferencesSection.Title"
        }

        return NSLocalizedString("Settings.PreferencesSection.Title", bundle: bundle, comment: "")
      }

      /// Value: Profile
      static func homeTabBarProfileTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.TabBar.Profile.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.TabBar.Profile.Title"
        }

        return NSLocalizedString("Home.TabBar.Profile.Title", bundle: bundle, comment: "")
      }

      /// Value: Profile Summary
      static func userProfileSummaryCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User.ProfileSummaryCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User.ProfileSummaryCell.Title"
        }

        return NSLocalizedString("User.ProfileSummaryCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Pull Requests
      static func repositoryPullRequestsCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.PullRequestsCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.PullRequestsCell.Title"
        }

        return NSLocalizedString("Repository.PullRequestsCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Readme
      static func repositoryReadmeCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.ReadmeCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.ReadmeCell.Title"
        }

        return NSLocalizedString("Repository.ReadmeCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Received
      static func eventsReceivedSegmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Events.ReceivedSegment.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Events.ReceivedSegment.Title"
        }

        return NSLocalizedString("Events.ReceivedSegment.Title", bundle: bundle, comment: "")
      }

      /// Value: Recently updated
      static func searchSortRepositoriesRecentlyUpdatedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.SortRepositories.RecentlyUpdated.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SortRepositories.RecentlyUpdated.Title"
        }

        return NSLocalizedString("Search.SortRepositories.RecentlyUpdated.Title", bundle: bundle, comment: "")
      }

      /// Value: Releases
      static func repositoryReleasesCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.ReleasesCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.ReleasesCell.Title"
        }

        return NSLocalizedString("Repository.ReleasesCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Remove cache
      static func settingsRemoveCacheTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings.RemoveCache.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings.RemoveCache.Title"
        }

        return NSLocalizedString("Settings.RemoveCache.Title", bundle: bundle, comment: "")
      }

      /// Value: Repositories
      static func repositoriesRepositoriesNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repositories.RepositoriesNavigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repositories.RepositoriesNavigation.Title"
        }

        return NSLocalizedString("Repositories.RepositoriesNavigation.Title", bundle: bundle, comment: "")
      }

      /// Value: Repositories
      static func searchRepositoriesSegmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.RepositoriesSegment.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.RepositoriesSegment.Title"
        }

        return NSLocalizedString("Search.RepositoriesSegment.Title", bundle: bundle, comment: "")
      }

      /// Value: Repositories
      static func userRepositoriesButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User.RepositoriesButton.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User.RepositoriesButton.Title"
        }

        return NSLocalizedString("User.RepositoriesButton.Title", bundle: bundle, comment: "")
      }

      /// Value: Reset
      static func commonReset(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Reset", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.Reset"
        }

        return NSLocalizedString("Common.Reset", bundle: bundle, comment: "")
      }

      /// Value: Save
      static func commonSave(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.Save"
        }

        return NSLocalizedString("Common.Save", bundle: bundle, comment: "")
      }

      /// Value: Search
      static func commonSearch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Search", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.Search"
        }

        return NSLocalizedString("Common.Search", bundle: bundle, comment: "")
      }

      /// Value: Search
      static func homeTabBarSearchTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.TabBar.Search.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.TabBar.Search.Title"
        }

        return NSLocalizedString("Home.TabBar.Search.Title", bundle: bundle, comment: "")
      }

      /// Value: Search
      static func searchSearchSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.SearchSection.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SearchSection.Title"
        }

        return NSLocalizedString("Search.SearchSection.Title", bundle: bundle, comment: "")
      }

      /// Value: Search
      static func searchSearchSegmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.SearchSegment.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SearchSegment.Title"
        }

        return NSLocalizedString("Search.SearchSegment.Title", bundle: bundle, comment: "")
      }

      /// Value: Search results for %@
      static func searchSearchSectionWithLanguageTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Search.SearchSectionWithLanguage.Title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.SearchSectionWithLanguage.Title"
        }

        let format = NSLocalizedString("Search.SearchSectionWithLanguage.Title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: See what the GitHub community is most excited about today
      static func whatsNewItem4Subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WhatsNew.Item4.Subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WhatsNew.Item4.Subtitle"
        }

        return NSLocalizedString("WhatsNew.Item4.Subtitle", bundle: bundle, comment: "")
      }

      /// Value: Settings
      static func contactsPermissionDeniedButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Contacts.PermissionDenied.Button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Contacts.PermissionDenied.Button"
        }

        return NSLocalizedString("Contacts.PermissionDenied.Button", bundle: bundle, comment: "")
      }

      /// Value: Settings
      static func homeTabBarSettingsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Home.TabBar.Settings.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Home.TabBar.Settings.Title"
        }

        return NSLocalizedString("Home.TabBar.Settings.Title", bundle: bundle, comment: "")
      }

      /// Value: Settings
      static func settingsNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings.Navigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings.Navigation.Title"
        }

        return NSLocalizedString("Settings.Navigation.Title", bundle: bundle, comment: "")
      }

      /// Value: Sign in with Github
      static func loginOAuthloginButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.OAuthloginButton.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.OAuthloginButton.Title"
        }

        return NSLocalizedString("Login.OAuthloginButton.Title", bundle: bundle, comment: "")
      }

      /// Value: Size
      static func repositorySizeCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.SizeCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.SizeCell.Title"
        }

        return NSLocalizedString("Repository.SizeCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Skip
      static func commonSkip(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Skip", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.Skip"
        }

        return NSLocalizedString("Common.Skip", bundle: bundle, comment: "")
      }

      /// Value: Source Code
      static func repositorySourceCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.SourceCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.SourceCell.Title"
        }

        return NSLocalizedString("Repository.SourceCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Stargazers
      static func usersStargazersNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Users.StargazersNavigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Users.StargazersNavigation.Title"
        }

        return NSLocalizedString("Users.StargazersNavigation.Title", bundle: bundle, comment: "")
      }

      /// Value: Starred
      static func repositoriesStarredNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repositories.StarredNavigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repositories.StarredNavigation.Title"
        }

        return NSLocalizedString("Repositories.StarredNavigation.Title", bundle: bundle, comment: "")
      }

      /// Value: Stars
      static func repositoryStarsButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.StarsButton.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.StarsButton.Title"
        }

        return NSLocalizedString("Repository.StarsButton.Title", bundle: bundle, comment: "")
      }

      /// Value: Stars
      static func userStarsCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User.StarsCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User.StarsCell.Title"
        }

        return NSLocalizedString("User.StarsCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Stars History
      static func repositoryStarsHistoryCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.StarsHistoryCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.StarsHistoryCell.Title"
        }

        return NSLocalizedString("Repository.StarsHistoryCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Success
      static func commonSuccess(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Success", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.Success"
        }

        return NSLocalizedString("Common.Success", bundle: bundle, comment: "")
      }

      /// Value: Support
      static func settingsSupportSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings.SupportSection.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings.SupportSection.Title"
        }

        return NSLocalizedString("Settings.SupportSection.Title", bundle: bundle, comment: "")
      }

      /// Value: SwiftHub is open source Stars are welcome ★
      static func whatsNewItem3Subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WhatsNew.Item3.Subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WhatsNew.Item3.Subtitle"
        }

        return NSLocalizedString("WhatsNew.Item3.Subtitle", bundle: bundle, comment: "")
      }

      /// Value: Themes
      static func whatsNewItem2Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WhatsNew.Item2.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WhatsNew.Item2.Title"
        }

        return NSLocalizedString("WhatsNew.Item2.Title", bundle: bundle, comment: "")
      }

      /// Value: These permissions are required %@
      static func loginPersonalDetailLabelText(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Login.PersonalDetailLabel.Text", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.PersonalDetailLabel.Text"
        }

        let format = NSLocalizedString("Login.PersonalDetailLabel.Text", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Tool for counting lines of code from repositories
      static func whatsNewItem1Subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WhatsNew.Item1.Subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WhatsNew.Item1.Subtitle"
        }

        return NSLocalizedString("WhatsNew.Item1.Subtitle", bundle: bundle, comment: "")
      }

      /// Value: Trending
      static func searchTrendingSectionTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.TrendingSection.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.TrendingSection.Title"
        }

        return NSLocalizedString("Search.TrendingSection.Title", bundle: bundle, comment: "")
      }

      /// Value: Trending
      static func searchTrendingSegmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.TrendingSegment.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.TrendingSegment.Title"
        }

        return NSLocalizedString("Search.TrendingSegment.Title", bundle: bundle, comment: "")
      }

      /// Value: Trending
      static func whatsNewItem4Title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WhatsNew.Item4.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WhatsNew.Item4.Title"
        }

        return NSLocalizedString("WhatsNew.Item4.Title", bundle: bundle, comment: "")
      }

      /// Value: Trending results for %@
      static func searchTrendingSectionWithLanguageTitle(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("Search.TrendingSectionWithLanguage.Title", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.TrendingSectionWithLanguage.Title"
        }

        let format = NSLocalizedString("Search.TrendingSectionWithLanguage.Title", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// Value: Unread
      static func notificationsUnreadSegmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Notifications.UnreadSegment.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Notifications.UnreadSegment.Title"
        }

        return NSLocalizedString("Notifications.UnreadSegment.Title", bundle: bundle, comment: "")
      }

      /// Value: Updated
      static func repositoryUpdatedCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.UpdatedCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.UpdatedCell.Title"
        }

        return NSLocalizedString("Repository.UpdatedCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Updated
      static func userUpdatedCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User.UpdatedCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User.UpdatedCell.Title"
        }

        return NSLocalizedString("User.UpdatedCell.Title", bundle: bundle, comment: "")
      }

      /// Value: Users
      static func searchUsersSegmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.UsersSegment.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.UsersSegment.Title"
        }

        return NSLocalizedString("Search.UsersSegment.Title", bundle: bundle, comment: "")
      }

      /// Value: View on GitHub
      static func whatsNewDetailButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WhatsNew.DetailButton.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WhatsNew.DetailButton.Title"
        }

        return NSLocalizedString("WhatsNew.DetailButton.Title", bundle: bundle, comment: "")
      }

      /// Value: Watchers
      static func repositoryWatchersButtonTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Repository.WatchersButton.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Repository.WatchersButton.Title"
        }

        return NSLocalizedString("Repository.WatchersButton.Title", bundle: bundle, comment: "")
      }

      /// Value: Watchers
      static func usersWatchersNavigationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Users.WatchersNavigation.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Users.WatchersNavigation.Title"
        }

        return NSLocalizedString("Users.WatchersNavigation.Title", bundle: bundle, comment: "")
      }

      /// Value: Watching
      static func userWatchingCellTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("User.WatchingCell.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "User.WatchingCell.Title"
        }

        return NSLocalizedString("User.WatchingCell.Title", bundle: bundle, comment: "")
      }

      /// Value: We can't continue without your  permission to access your contacts.  Try Again?
      static func contactsPermissionDeniedDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Contacts.PermissionDenied.Description", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Contacts.PermissionDenied.Description"
        }

        return NSLocalizedString("Contacts.PermissionDenied.Description", bundle: bundle, comment: "")
      }

      /// Value: We need your permission!
      static func contactsPermissionDeniedTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Contacts.PermissionDenied.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Contacts.PermissionDenied.Title"
        }

        return NSLocalizedString("Contacts.PermissionDenied.Title", bundle: bundle, comment: "")
      }

      /// Value: Weekly
      static func searchWeeklySegmentTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Search.WeeklySegment.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Search.WeeklySegment.Title"
        }

        return NSLocalizedString("Search.WeeklySegment.Title", bundle: bundle, comment: "")
      }

      /// Value: Welcome to SwiftHub
      static func loginTitleLabelText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.TitleLabel.Text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.TitleLabel.Text"
        }

        return NSLocalizedString("Login.TitleLabel.Text", bundle: bundle, comment: "")
      }

      /// Value: Welcome to SwiftHub!
      static func initialNoResults(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Initial.NoResults", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Initial.NoResults"
        }

        return NSLocalizedString("Initial.NoResults", bundle: bundle, comment: "")
      }

      /// Value: Whats New
      static func settingsWhatsNewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings.WhatsNew.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings.WhatsNew.Title"
        }

        return NSLocalizedString("Settings.WhatsNew.Title", bundle: bundle, comment: "")
      }

      /// Value: Whats New
      static func whatsNewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WhatsNew.Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WhatsNew.Title"
        }

        return NSLocalizedString("WhatsNew.Title", bundle: bundle, comment: "")
      }

      /// Value: Yes
      static func commonYes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Common.Yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Common.Yes"
        }

        return NSLocalizedString("Common.Yes", bundle: bundle, comment: "")
      }

      /// Value: You can apply different themes with Light and Dark modes
      static func whatsNewItem2Subtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("WhatsNew.Item2.Subtitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "WhatsNew.Item2.Subtitle"
        }

        return NSLocalizedString("WhatsNew.Item2.Subtitle", bundle: bundle, comment: "")
      }

      /// Value: login
      static func loginLoginTextFieldPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.LoginTextField.Placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.LoginTextField.Placeholder"
        }

        return NSLocalizedString("Login.LoginTextField.Placeholder", bundle: bundle, comment: "")
      }

      /// Value: password
      static func loginPasswordTextFieldPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.PasswordTextField.Placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.PasswordTextField.Placeholder"
        }

        return NSLocalizedString("Login.PasswordTextField.Placeholder", bundle: bundle, comment: "")
      }

      /// Value: personal access token
      static func loginPersonalTokenTextFieldPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Login.PersonalTokenTextField.Placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Login.PersonalTokenTextField.Placeholder"
        }

        return NSLocalizedString("Login.PersonalTokenTextField.Placeholder", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _LaunchScreen: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
